//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "companies")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    #[sea_orm(unique)]
    pub name_alias: String,
    pub description: Option<String>,
    pub contact_info: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::knowledge_base::Entity")]
    KnowledgeBase,
    #[sea_orm(has_many = "super::notes::Entity")]
    Notes,
    #[sea_orm(has_many = "super::projects::Entity")]
    Projects,
    #[sea_orm(has_many = "super::user_access::Entity")]
    UserAccess,
    #[sea_orm(has_many = "super::user_company::Entity")]
    UserCompany,
}

impl Related<super::knowledge_base::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::KnowledgeBase.def()
    }
}

impl Related<super::notes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notes.def()
    }
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl Related<super::user_access::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserAccess.def()
    }
}

impl Related<super::user_company::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserCompany.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

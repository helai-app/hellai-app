//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub login: String,
    pub user_name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub is_active: bool,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::notes::Entity")]
    Notes,
    #[sea_orm(has_many = "super::passwords::Entity")]
    Passwords,
    #[sea_orm(has_many = "super::subtasks::Entity")]
    Subtasks,
    #[sea_orm(has_many = "super::tasks::Entity")]
    Tasks,
    #[sea_orm(has_many = "super::user_access::Entity")]
    UserAccess,
    #[sea_orm(has_many = "super::user_company::Entity")]
    UserCompany,
}

impl Related<super::notes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notes.def()
    }
}

impl Related<super::passwords::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Passwords.def()
    }
}

impl Related<super::subtasks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subtasks.def()
    }
}

impl Related<super::tasks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tasks.def()
    }
}

impl Related<super::user_access::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserAccess.def()
    }
}

impl Related<super::user_company::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserCompany.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
